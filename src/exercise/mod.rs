///
/// ## 两数之和
///
/// 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
///
/// 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
///
/// - 示例:
///
///```text
///给定 nums = [2, 7, 11, 15], target = 9
///
///因为 nums[0] + nums[1] = 2 + 7 = 9
///所以返回 [0, 1]
///```
///> 来源：力扣（LeetCode）
///> 链接：https://leetcode-cn.com/problems/two-sum
///> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
pub mod two_sum;

///
/// ## 无重复字符的最长子串
///
/// 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
///
///- 示例 1:
///
///```text
///输入: "abcabcbb"
///输出: 3
///解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
/// ```
///
///- 示例 2:
///
/// ```text
///输入: "bbbbb"
///输出: 1
///解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
/// ```
///
///- 示例 3:
///
/// ```text
///输入: "pwwkew"
///输出: 3
///解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
///     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
/// ```
///
///> 来源：力扣（LeetCode）
///> 链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
///> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
///
pub mod length_of_longest_substring;

///
/// ## 寻找两个有序数组的中位数
///
/// 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
///
///请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
///
///你可以假设 nums1 和 nums2 不会同时为空。
///
///- 示例 1:
///
/// ```text
///nums1 = [1, 3]
///nums2 = [2]
///
///则中位数是 2.0
/// ```
///
///- 示例 2:
///
/// ```text
///nums1 = [1, 2]
///nums2 = [3, 4]
///
///则中位数是 (2 + 3)/2 = 2.5
/// ```
///
///> 来源：力扣（LeetCode）
///> 链接：https://leetcode-cn.com/problems/median-of-two-sorted-arrays
///> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
pub mod find_median;

///
/// ## 最长回文子串
///
/// 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
///
/// - 示例 1：
///
/// ```text
/// 输入: "babad"
/// 输出: "bab"
/// 注意: "aba" 也是一个有效答案。
/// ```
///
/// - 示例 2：
///
/// ```text
/// 输入: "cbbd"
/// 输出: "bb"
/// ```
///
/// 来源：力扣（LeetCode）
/// 链接：https://leetcode-cn.com/problems/longest-palindromic-substring
/// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
pub mod longest_palindrome;

///
/// ## Z 字形变换
///
/// 将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。
///
/// 比如输入字符串为 "`LEETCODEISHIRING`" 行数为 3 时，排列如下：
///
/// ```text
/// L   C   I   R
/// E T O E S I I G
/// E   D   H   N
/// ```
///
/// 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："`LCIRETOESIIGEDHN`"。
///
/// 请你实现这个将字符串进行指定行数变换的函数：
///
/// ```text
/// string convert(string s, int numRows);
/// ```
///
/// - 示例 1:
///
/// ```text
/// 输入: s = "LEETCODEISHIRING", numRows = 3
/// 输出: "LCIRETOESIIGEDHN"
/// ```
///
/// - 示例 2:
///
/// ```text
/// 输入: s = "LEETCODEISHIRING", numRows = 4
/// 输出: "LDREOEIIECIHNTSG"
/// 解释:
///
/// L     D     R
/// E   O E   I I
/// E C   I H   N
/// T     S     G
/// ```
///
/// 来源：力扣（LeetCode）
/// 链接：https://leetcode-cn.com/problems/zigzag-conversion
/// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
pub mod convert;

///
/// ## 两数相加
///
/// 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
///
/// 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
///
/// 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
///
/// 示例：
///
/// ```
/// 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
/// 输出：7 -> 0 -> 8
/// 原因：342 + 465 = 807
/// ```
///
/// 来源：力扣（LeetCode）
/// 链接：https://leetcode-cn.com/problems/add-two-numbers
/// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
///
pub mod add_two_numbers;


///
/// ## 整数翻转
///
/// 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
///
/// 示例 1:
///
/// ```no_run
///
/// 输入: 123
/// 输出: 321
///
/// ```
///
/// 示例 2:
///
/// ```no_run
///
/// 输入: -123
/// 输出: -321
///
/// ```
///
/// 示例 3:
///
/// ```no_run
///
/// 输入: 120
/// 输出: 21
///
/// ```
///
/// 注意:
/// 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。
///
pub mod reverse_num;


///
/// # 字符串转化为整数
///
/// 请你来实现一个 atoi 函数，使其能将字符串转换成整数。
///
/// 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
///
/// 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
///
/// 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
///
/// 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
///
/// 在任何情况下，若函数不能进行有效的转换时，请返回 0。
///
/// 说明：
/// 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
///
///
///
///
pub mod atoi;

///
/// # 回文数
///
/// 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
///
/// - 示例 1:
///
/// ```no_run
/// 输入: 121
/// 输出: true
/// ```
///
/// - 示例 2:
///
/// ```no_run
/// 输入: -121
/// 输出: false
/// 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
/// ```
///
/// - 示例3
///
/// ```no_run
/// 输入：10
/// 输出：false
/// 解释：从右向左读, 为 01 。因此它不是一个回文数。
///
/// ```
///
///
pub mod is_palindrome;